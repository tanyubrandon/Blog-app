{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\n\nconst useFetch = url => {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    // const abortCont=new AbortController();\n    setTimeout(() => {\n      fetch(url).then(res => {\n        if (!res.ok) {\n          throw Error(\"A fatal error occured!\");\n        }\n\n        ;\n        return res.json();\n      }).then(data => {\n        setData(data);\n        setIsPending(false);\n      }).catch(e => {\n        // console.log(e);\n        // if(e.name==='AbortError'){\n        //     console.log('Fetch aborted!');\n        // }\n        // else{\n        setError(e.message);\n        setIsPending(false); // }\n      });\n    }, 1000); // return ()=>abortCont.abort();\n  }, [url]);\n  return {\n    data,\n    isPending,\n    error\n  };\n};\n\n_s(useFetch, \"cXWu45hQE9y6Of2sqlY9XSRohsk=\");\n\nexport default useFetch;","map":{"version":3,"sources":["/home/tanyu/Documents/tuts/dojo-blog/src/useFetch.js"],"names":["useState","useEffect","useFetch","url","data","setData","isPending","setIsPending","error","setError","setTimeout","fetch","then","res","ok","Error","json","catch","e","message"],"mappings":";;AAAA,SAASA,QAAT,EAAkBC,SAAlB,QAAmC,OAAnC;;AAEA,MAAMC,QAAQ,GAAEC,GAAD,IAAO;AAAA;;AAElB,QAAM,CAACC,IAAD,EAAMC,OAAN,IAAeL,QAAQ,CAAC,IAAD,CAA7B;AAEA,QAAK,CAACM,SAAD,EAAWC,YAAX,IAAyBP,QAAQ,CAAC,IAAD,CAAtC;AAEA,QAAK,CAACQ,KAAD,EAAOC,QAAP,IAAiBT,QAAQ,CAAC,IAAD,CAA9B;AAEAC,EAAAA,SAAS,CAAC,MAAI;AACV;AACAS,IAAAA,UAAU,CAAC,MAAI;AACXC,MAAAA,KAAK,CAACR,GAAD,CAAL,CACCS,IADD,CACMC,GAAG,IAAE;AACP,YAAG,CAACA,GAAG,CAACC,EAAR,EAAW;AACP,gBAAMC,KAAK,CAAC,wBAAD,CAAX;AACH;;AAAA;AACF,eAAQF,GAAG,CAACG,IAAJ,EAAR;AACF,OAND,EAOCJ,IAPD,CAOMR,IAAI,IAAE;AACPC,QAAAA,OAAO,CAACD,IAAD,CAAP;AACAG,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACJ,OAVD,EAWCU,KAXD,CAWQC,CAAD,IAAK;AACR;AACA;AACA;AACA;AACA;AACIT,QAAAA,QAAQ,CAACS,CAAC,CAACC,OAAH,CAAR;AACAZ,QAAAA,YAAY,CAAC,KAAD,CAAZ,CAPI,CAQR;AACH,OApBD;AAqBH,KAtBS,EAsBR,IAtBQ,CAAV,CAFU,CA0BV;AACH,GA3BQ,EA2BP,CAACJ,GAAD,CA3BO,CAAT;AA6BA,SAAO;AAACC,IAAAA,IAAD;AAAME,IAAAA,SAAN;AAAgBE,IAAAA;AAAhB,GAAP;AACH,CAtCD;;GAAMN,Q;;AAwCN,eAAeA,QAAf","sourcesContent":["import { useState,useEffect } from \"react\";\n\nconst useFetch=(url)=>{\n\n    const [data,setData]=useState(null);\n\n    const[isPending,setIsPending]=useState(true);\n\n    const[error,setError]=useState(null);\n    \n    useEffect(()=>{\n        // const abortCont=new AbortController();\n        setTimeout(()=>{\n            fetch(url)\n            .then(res=>{\n                if(!res.ok){\n                    throw Error(\"A fatal error occured!\");\n                };\n               return  res.json();\n            })\n            .then(data=>{\n                 setData(data);   \n                 setIsPending(false);\n            })\n            .catch((e)=>{  \n                // console.log(e);\n                // if(e.name==='AbortError'){\n                //     console.log('Fetch aborted!');\n                // }\n                // else{\n                    setError(e.message);\n                    setIsPending(false);\n                // }\n            });\n        },1000);   \n\n        // return ()=>abortCont.abort();\n    },[url]);\n\n    return {data,isPending,error}\n};\n\nexport default useFetch;"]},"metadata":{},"sourceType":"module"}